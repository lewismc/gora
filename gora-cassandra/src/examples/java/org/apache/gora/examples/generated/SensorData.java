/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.gora.examples.generated;  
@SuppressWarnings("all")
public class SensorData extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorData\",\"namespace\":\"org.apache.gora.examples.generated\",\"fields\":[{\"name\":\"reading\",\"type\":\"double\"},{\"name\":\"events\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"params\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"context\",\"type\":{\"type\":\"record\",\"name\":\"SensorContext\",\"fields\":[{\"name\":\"mem\",\"type\":\"double\"},{\"name\":\"power\",\"type\":\"double\"}]}}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    READING(0, "reading"),
    EVENTS(1, "events"),
    PARAMS(2, "params"),
    CONTEXT(3, "context"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "reading",
  "events",
  "params",
  "context",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return SensorData._ALL_FIELDS.length;
  }

  private double reading;
  private java.util.List<java.lang.Integer> events;
  private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> params;
  private org.apache.gora.examples.generated.SensorContext context;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return reading;
    case 1: return events;
    case 2: return params;
    case 3: return context;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: reading = (java.lang.Double)(value); break;
    case 1: events = (java.util.List<java.lang.Integer>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyListWrapper((java.util.List)value)); break;
    case 2: params = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)value)); break;
    case 3: context = (org.apache.gora.examples.generated.SensorContext)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'reading' field.
   */
  public java.lang.Double getReading() {
    return reading;
  }

  /**
   * Sets the value of the 'reading' field.
   * @param value the value to set.
   */
  public void setReading(java.lang.Double value) {
    this.reading = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'reading' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isReadingDirty() {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'events' field.
   */
  public java.util.List<java.lang.Integer> getEvents() {
    return events;
  }

  /**
   * Sets the value of the 'events' field.
   * @param value the value to set.
   */
  public void setEvents(java.util.List<java.lang.Integer> value) {
    this.events = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyListWrapper(value);
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'events' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isEventsDirty() {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'params' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParams() {
    return params;
  }

  /**
   * Sets the value of the 'params' field.
   * @param value the value to set.
   */
  public void setParams(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.params = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper(value);
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'params' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isParamsDirty() {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'context' field.
   */
  public org.apache.gora.examples.generated.SensorContext getContext() {
    return context;
  }

  /**
   * Sets the value of the 'context' field.
   * @param value the value to set.
   */
  public void setContext(org.apache.gora.examples.generated.SensorContext value) {
    this.context = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'context' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isContextDirty() {
    return isDirty(3);
  }

  /** Creates a new SensorData RecordBuilder */
  public static org.apache.gora.examples.generated.SensorData.Builder newBuilder() {
    return new org.apache.gora.examples.generated.SensorData.Builder();
  }
  
  /** Creates a new SensorData RecordBuilder by copying an existing Builder */
  public static org.apache.gora.examples.generated.SensorData.Builder newBuilder(org.apache.gora.examples.generated.SensorData.Builder other) {
    return new org.apache.gora.examples.generated.SensorData.Builder(other);
  }
  
  /** Creates a new SensorData RecordBuilder by copying an existing SensorData instance */
  public static org.apache.gora.examples.generated.SensorData.Builder newBuilder(org.apache.gora.examples.generated.SensorData other) {
    return new org.apache.gora.examples.generated.SensorData.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for SensorData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorData>
    implements org.apache.avro.data.RecordBuilder<SensorData> {

    private double reading;
    private java.util.List<java.lang.Integer> events;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> params;
    private org.apache.gora.examples.generated.SensorContext context;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.gora.examples.generated.SensorData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.gora.examples.generated.SensorData.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing SensorData instance */
    private Builder(org.apache.gora.examples.generated.SensorData other) {
            super(org.apache.gora.examples.generated.SensorData.SCHEMA$);
      if (isValidValue(fields()[0], other.reading)) {
        this.reading = (java.lang.Double) data().deepCopy(fields()[0].schema(), other.reading);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.events)) {
        this.events = (java.util.List<java.lang.Integer>) data().deepCopy(fields()[1].schema(), other.events);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.params)) {
        this.params = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) data().deepCopy(fields()[2].schema(), other.params);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.context)) {
        this.context = (org.apache.gora.examples.generated.SensorContext) data().deepCopy(fields()[3].schema(), other.context);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'reading' field */
    public java.lang.Double getReading() {
      return reading;
    }
    
    /** Sets the value of the 'reading' field */
    public org.apache.gora.examples.generated.SensorData.Builder setReading(double value) {
      validate(fields()[0], value);
      this.reading = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'reading' field has been set */
    public boolean hasReading() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'reading' field */
    public org.apache.gora.examples.generated.SensorData.Builder clearReading() {
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'events' field */
    public java.util.List<java.lang.Integer> getEvents() {
      return events;
    }
    
    /** Sets the value of the 'events' field */
    public org.apache.gora.examples.generated.SensorData.Builder setEvents(java.util.List<java.lang.Integer> value) {
      validate(fields()[1], value);
      this.events = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'events' field has been set */
    public boolean hasEvents() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'events' field */
    public org.apache.gora.examples.generated.SensorData.Builder clearEvents() {
      events = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'params' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParams() {
      return params;
    }
    
    /** Sets the value of the 'params' field */
    public org.apache.gora.examples.generated.SensorData.Builder setParams(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.params = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'params' field has been set */
    public boolean hasParams() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'params' field */
    public org.apache.gora.examples.generated.SensorData.Builder clearParams() {
      params = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'context' field */
    public org.apache.gora.examples.generated.SensorContext getContext() {
      return context;
    }
    
    /** Sets the value of the 'context' field */
    public org.apache.gora.examples.generated.SensorData.Builder setContext(org.apache.gora.examples.generated.SensorContext value) {
      validate(fields()[3], value);
      this.context = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'context' field has been set */
    public boolean hasContext() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'context' field */
    public org.apache.gora.examples.generated.SensorData.Builder clearContext() {
      context = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    @Override
    public SensorData build() {
      try {
        SensorData record = new SensorData();
        record.reading = fieldSetFlags()[0] ? this.reading : (java.lang.Double) defaultValue(fields()[0]);
        record.events = fieldSetFlags()[1] ? this.events : (java.util.List<java.lang.Integer>) new org.apache.gora.persistency.impl.DirtyListWrapper((java.util.List)defaultValue(fields()[1]));
        record.params = fieldSetFlags()[2] ? this.params : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)defaultValue(fields()[2]));
        record.context = fieldSetFlags()[3] ? this.context : (org.apache.gora.examples.generated.SensorContext) SensorContext.newBuilder().build();
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public SensorData.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public SensorData newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends SensorData implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'reading' field.
		   */
	  public java.lang.Double getReading() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'reading' field.
		   * @param value the value to set.
	   */
	  public void setReading(java.lang.Double value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'reading' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isReadingDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'events' field.
		   */
	  public java.util.List<java.lang.Integer> getEvents() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'events' field.
		   * @param value the value to set.
	   */
	  public void setEvents(java.util.List<java.lang.Integer> value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'events' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isEventsDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'params' field.
		   */
	  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParams() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'params' field.
		   * @param value the value to set.
	   */
	  public void setParams(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'params' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isParamsDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'context' field.
		   */
	  public org.apache.gora.examples.generated.SensorContext getContext() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'context' field.
		   * @param value the value to set.
	   */
	  public void setContext(org.apache.gora.examples.generated.SensorContext value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'context' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isContextDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

