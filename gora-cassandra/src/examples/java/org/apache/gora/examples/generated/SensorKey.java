/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.gora.examples.generated;  
@SuppressWarnings("all")
public class SensorKey extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorKey\",\"namespace\":\"org.apache.gora.examples.generated\",\"fields\":[{\"name\":\"sensorId\",\"type\":\"string\"},{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"date\",\"type\":\"long\"}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    SENSOR_ID(0, "sensorId"),
    YEAR(1, "year"),
    DATE(2, "date"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "sensorId",
  "year",
  "date",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return SensorKey._ALL_FIELDS.length;
  }

  private java.lang.CharSequence sensorId;
  private int year;
  private long date;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sensorId;
    case 1: return year;
    case 2: return date;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: sensorId = (java.lang.CharSequence)(value); break;
    case 1: year = (java.lang.Integer)(value); break;
    case 2: date = (java.lang.Long)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sensorId' field.
   */
  public java.lang.CharSequence getSensorId() {
    return sensorId;
  }

  /**
   * Sets the value of the 'sensorId' field.
   * @param value the value to set.
   */
  public void setSensorId(java.lang.CharSequence value) {
    this.sensorId = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'sensorId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSensorIdDirty() {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.Integer value) {
    this.year = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'year' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isYearDirty() {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'date' field.
   */
  public java.lang.Long getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.Long value) {
    this.date = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'date' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isDateDirty() {
    return isDirty(2);
  }

  /** Creates a new SensorKey RecordBuilder */
  public static org.apache.gora.examples.generated.SensorKey.Builder newBuilder() {
    return new org.apache.gora.examples.generated.SensorKey.Builder();
  }
  
  /** Creates a new SensorKey RecordBuilder by copying an existing Builder */
  public static org.apache.gora.examples.generated.SensorKey.Builder newBuilder(org.apache.gora.examples.generated.SensorKey.Builder other) {
    return new org.apache.gora.examples.generated.SensorKey.Builder(other);
  }
  
  /** Creates a new SensorKey RecordBuilder by copying an existing SensorKey instance */
  public static org.apache.gora.examples.generated.SensorKey.Builder newBuilder(org.apache.gora.examples.generated.SensorKey other) {
    return new org.apache.gora.examples.generated.SensorKey.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for SensorKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorKey>
    implements org.apache.avro.data.RecordBuilder<SensorKey> {

    private java.lang.CharSequence sensorId;
    private int year;
    private long date;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.gora.examples.generated.SensorKey.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.gora.examples.generated.SensorKey.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing SensorKey instance */
    private Builder(org.apache.gora.examples.generated.SensorKey other) {
            super(org.apache.gora.examples.generated.SensorKey.SCHEMA$);
      if (isValidValue(fields()[0], other.sensorId)) {
        this.sensorId = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.sensorId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.year)) {
        this.year = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.year);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = (java.lang.Long) data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'sensorId' field */
    public java.lang.CharSequence getSensorId() {
      return sensorId;
    }
    
    /** Sets the value of the 'sensorId' field */
    public org.apache.gora.examples.generated.SensorKey.Builder setSensorId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sensorId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sensorId' field has been set */
    public boolean hasSensorId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sensorId' field */
    public org.apache.gora.examples.generated.SensorKey.Builder clearSensorId() {
      sensorId = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'year' field */
    public java.lang.Integer getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public org.apache.gora.examples.generated.SensorKey.Builder setYear(int value) {
      validate(fields()[1], value);
      this.year = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'year' field */
    public org.apache.gora.examples.generated.SensorKey.Builder clearYear() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'date' field */
    public java.lang.Long getDate() {
      return date;
    }
    
    /** Sets the value of the 'date' field */
    public org.apache.gora.examples.generated.SensorKey.Builder setDate(long value) {
      validate(fields()[2], value);
      this.date = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'date' field has been set */
    public boolean hasDate() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'date' field */
    public org.apache.gora.examples.generated.SensorKey.Builder clearDate() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    @Override
    public SensorKey build() {
      try {
        SensorKey record = new SensorKey();
        record.sensorId = fieldSetFlags()[0] ? this.sensorId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.year = fieldSetFlags()[1] ? this.year : (java.lang.Integer) defaultValue(fields()[1]);
        record.date = fieldSetFlags()[2] ? this.date : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public SensorKey.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public SensorKey newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends SensorKey implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'sensorId' field.
		   */
	  public java.lang.CharSequence getSensorId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'sensorId' field.
		   * @param value the value to set.
	   */
	  public void setSensorId(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'sensorId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSensorIdDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'year' field.
		   */
	  public java.lang.Integer getYear() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'year' field.
		   * @param value the value to set.
	   */
	  public void setYear(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'year' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isYearDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'date' field.
		   */
	  public java.lang.Long getDate() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'date' field.
		   * @param value the value to set.
	   */
	  public void setDate(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'date' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isDateDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

